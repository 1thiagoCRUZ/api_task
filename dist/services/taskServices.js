const supabase=require("../config/database"),{getAllTaskUser:getAllTaskUser,deleteTask:deleteTask}=require("../controllers/taskController");module.exports={create:async(s,e)=>{const{user_id_task:r,title_task:a,description_task:t,prioridade:l,data_final:o,status_task:u}=s,{data:i,error:c}=await supabase.from("tasks_users").insert([{user_id_task:r,title_task:a,description_task:t,prioridade:l,data_final:o,status_task:u}]);return c?e(c):e(null,i)},deleteTask:async(s,e)=>{try{const{id_user:r,id_task:a}=s,{data:t,error:l}=await supabase.from("tasks_users").delete().eq("user_id_task",r).eq("id",a);if(l)throw l;return t&&0!==t.length?e(null,{success:1,message:"Task deleted successfully",data:t}):e(null,{success:1,message:"Task deleted successfully"})}catch(s){return console.error("Error deleting task:",s.message),e({success:0,message:"Internal Server Error",error:s.message})}},getAllTaskUser:async(s,e)=>{try{const{data:r,error:a}=await supabase.from("tasks_users").select("id, title_task, description_task, prioridade, data_final, status_task").eq("user_id_task",s);if(a)throw a;return r&&0!==r.length?e(null,{success:1,data:r}):e({success:0,message:"No tasks found for this user"})}catch(s){return console.error("Error fetching tasks:",s.message),e({success:0,message:"Internal Server Error",error:s.message})}}};