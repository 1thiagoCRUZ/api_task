const{create:create,getAllTaskUser:getAllTaskUser,deleteTask:deleteTask,getTasksByStatus:getTasksByStatus,updateTaskStatus:updateTaskStatus}=require("../services/taskServices");module.exports={createTask:(s,e)=>{const a=s.body;create(a,((s,a)=>s?(console.log(s),e.status(500).json({success:0,message:"Database connection error"})):e.status(201).json({success:1,message:"Insert task success"})))},getAllTaskUser:(s,e)=>{const a=s.params.id_user;getAllTaskUser(a,((s,a)=>{if(!s)return a?e.json({success:1,data:a}):e.json({success:0,message:"Record not found"});console.log(s)}))},getTasksByStatus:(s,e)=>{const{id_user:a,status:t}=s.params;getTasksByStatus(a,t,((s,a)=>s?(console.log(s),e.status(500).json({success:0,message:"Internal Server Error",error:s.message})):a&&0!==a.success?e.json({success:1,data:a.data}):e.status(404).json({success:0,message:a.message||"Record not found"})))},deleteTask:(s,e)=>{const{id_user:a}=s.body,{id_task:t}=s.params;if(!a||!t)return e.status(400).json({success:0,message:"User ID and Task ID are required"});deleteTask({id_user:a,id_task:t},((s,a)=>s?(console.error(s),e.status(500).json({success:0,message:"Internal Server Error",error:s.message})):a&&0!==a.success?e.json({success:1,message:a.message,data:a.data}):e.status(404).json({success:0,message:"Task not found or could not be deleted"})))},updateTaskStatus:(s,e)=>{const{id_user:a,id_task:t,new_status:r}=s.body;if(!a||!t||!r)return e.status(400).json({success:0,message:"ID do usuário, ID da tarefa e novo status são obrigatórios"});updateTaskStatus({id_user:a,id_task:t,new_status:r},((s,a)=>s?(console.error(s),e.status(500).json({success:0,message:"Internal Server Error",error:s.message})):a&&0!==a.success?e.json({success:1,message:a.message,data:a.data}):e.status(404).json({success:0,message:a.message||"Task not found or status not updated"})))}};